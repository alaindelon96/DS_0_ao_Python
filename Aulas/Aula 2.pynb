{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Aula 2.pynb","provenance":[],"mount_file_id":"1B_qQLpHf2Y1NtI5lQHOGBsjy0ar8Mlig","authorship_tag":"ABX9TyOEf1pKUG4QrNgDO5QMW4CY"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"XrpMPZwfGqOt"},"source":["**AULA 2**"]},{"cell_type":"code","metadata":{"id":"yKH3K8ztTZt1"},"source":["#importando bibliotecas\n","import pandas as pd\n","import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rW1H4wz8VQlG","colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":73},"executionInfo":{"status":"ok","timestamp":1633912588138,"user_tz":180,"elapsed":43590,"user":{"displayName":"Kevin Puga","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhtqCFnGWTRmMrvPggXTaWaMez5ZBOD_v2ORKJOog=s64","userId":"06164262735999046241"}},"outputId":"d09a30e6-5f6d-4b5b-f929-e40de5a2a214"},"source":["#importando csv pro collab\n","from google.colab import files\n","uploaded = files.upload()\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-7dcbd150-b146-422d-9f72-355c2b04f4ec\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-7dcbd150-b146-422d-9f72-355c2b04f4ec\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving kc_house_data.csv to kc_house_data.csv\n"]}]},{"cell_type":"code","metadata":{"id":"-TicsPmDVu6e"},"source":["#lendo o arquivo csv e definindo uma váriavel pra ele\n","import io\n","data = pd.read_csv(io.BytesIO(uploaded['kc_house_data.csv']))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1RI1lei0WB7M"},"source":["#verificar tipos de váriavel cada coluna\n","data.dtypes"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"w46s560IehCC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633915252094,"user_tz":180,"elapsed":315,"user":{"displayName":"Kevin Puga","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhtqCFnGWTRmMrvPggXTaWaMez5ZBOD_v2ORKJOog=s64","userId":"06164262735999046241"}},"outputId":"3135d145-5a40-485a-e171-28839b3b617b"},"source":["#mostrar as colunas da tabela  0  “id” 0, “date” 1,“price” 2, “floors” 7, “zipcode” 16\n","data.columns"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living',\n","       'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade',\n","       'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode',\n","       'lat', 'long', 'level', 'house_age', 'dormitory_type',\n","       'condition_type'],\n","      dtype='object')"]},"metadata":{},"execution_count":89}]},{"cell_type":"code","metadata":{"id":"VXvOM7R0alye"},"source":["#função para converter STRING(object) em formato de DATA(date)\n","data['date'] = pd.to_datetime(data['date'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PkOQGFz9auoU"},"source":["# #convertendo variaveis\n","# # INTEIRO > FLOAT\n","#data['bedrooms'] = data['bedrooms'].astype(float)\n","# # FLOAT > INTEIRO\n","#data['bedrooms'] = data['bedrooms'].astype(int)  #prestar atenção no tipo do INT ou FLOAT, tem de ser tudo o mesmo tipo 32 ou 64\n","# # STRING > INTEIRO\n","#data['bedrooms'] = data['bedrooms'].astype(str)\n","# # STRING > DATA\n","#data['bedrooms'] = pd.to_datetime(data['bedrooms'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lR62eJ8vbwx9"},"source":["#CRIANDO novas variáveis\n","#CRIANDO novas colunas \n","data['names'] = 'kevin'\n","data['data_de_abertura'] = pd.to_datetime('20-08-2021')\n","#DELETANDO novas varáveis\n","data = data.drop(['names', 'data_de_abertura'], axis=1)\n","#SELEÇÃO DE DADOS (pelos NOMES das colunas)\n","print(data[['id', 'bathrooms', 'price']].head())\n","#SELEÇÃO DE DADOS (pelos INDICE (INDEX) das colunas)\n","print(data.iloc[10:100, 0:5])\n","#SELEÇÃO DE DADOS (pelos INDICE (INDEX) e NOMES das colunas\n","print(data.loc[0:4, ['price', 'id', 'bathrooms']])\n","#SELEÇÃO DE DADOS (pelos por indices boleanos)\n","cols = [True, False, True, False, False, False, True, True, False, False, False, False, False, False, False, False, False, False, False, False, False]\n","print(data.loc[0:10, cols])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dVYIGpCNd9iS"},"source":["#RESPONDENDO AS PERGUNTAS DE NEGÓCIO\n","\n","# 1 Qual a data do imóvel mais antigo no portfólio? - Ordenar o conjunto de dados pela menor data\n","data.sort_values('date', ascending=True)\n","\n","# 2 Quantos imóveis possuem o número máximo de andares - Ver qual o maior numero de andares em um imóvel e localicar aqueles que possuem este número\n","#              METODO KEVIN\n","data[['floors']].sort_values('floors', ascending=False) # Verifica quais os imóveis com maior número de andares\n","len(data[['floors']].query('floors == 3.5')) # Verifica quantos imóveis possuem 3.5 andares (Número máximo)\n","#              METODO MEIGAROM\n","data['floors'].unique() # Mostra quais os valores unicos de uma coluna ou linha\n","data[data['floors'] == 3.5].shape # retorna o numero de linhas e colunas da tabela\n","\n","# 3 Criar uma classificação para o imóveis, separando-os em baixo e alto padrão, de acordo com preço.\n","# Acima de R$ 540.000 -> alto padrão ( high_standard )\n","# Abaixo de R$ 540.000 -> baixo padrão ( low_standard )\n","#\n","data['level'] = 'standart'  #cria a coluna level, com todos valores como standart.\n","data.loc[data['price'] > 540000, 'level'] # localiza os dados da coluna level que possuem um valor na coluna de price acima de 540000\n","data.loc[data['price'] > 540000, 'level'] = 'high_standart' # atribui o valor 'high_standart' aos dados localizados. Acima de 540000.\n","data.loc[data['price'] < 540000, 'level'] = 'low_standart' # atribui o valor 'high_standart' aos dados localizados. Abaixo de 540000.\n","\n","# 4 Gostaria de um relatório ordenado pelo preço e contento as seguintes informações:\n","# id do imóvel, data que o imóvel ficou disponível para compra, o número de quartos, o tamanho total to terreno,o preço, a classificação do imóvel.\n","\n","# criando o relatorio, seleciona as colunas desejasdas e a ordem desejada\n","report = data[['id', 'date', 'bedrooms','sqft_lot', 'price', 'level']].sort_values('price', ascending=False) \n","# printando pra ver se deu certo\n","print(report.head())\n","# exportando para a maquina virtual - fica salvo na pasta CONTENT, depois é só fazer o download se quiser salvar no HD <<<<\n","report.to_csv('relatorio.csv', index=False) # o index=False é pra resetar os índices e não ir com os do dataset antigo\n","\n","# 5 Gostaria de um Mapa indicando onde as casas estão localizadas geograficamente.\n","\n","#Plotly = Biblioteca que armazena uma função que senha mapas\n","import plotly.express as px\n","#Scatter MapBox - Função que desenha mapa\n","data_mapa = data[['id', 'lat', 'long', 'price']]\n","\n","mapa = px.scatter_mapbox(data_mapa, lat= 'lat', lon= 'long', hover_name= 'id',  #define as propriedade dos pontos no mapa e coloca ele numa variável\n","              hover_data=['price'], color_discrete_sequence=['darkgreen'],\n","              zoom=15, height=300)\n","\n","mapa.layout.update(mapbox_style='open-street-map') # atualiza o layout do mapa\n","mapa.layout.update(height=600, margin={'r':0, 't':0, 'l':0, 'b':0}) # atualiza o layout do mapa\n","mapa.show() #mostra o mapa\n","mapa.write_html('mapa_relatorio.html')\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XruCmQIbGjvs"},"source":["**EXERCÍCIOS**"]},{"cell_type":"code","metadata":{"id":"rqzYF3S2-dB1"},"source":["# 1. Crie uma nova colunachamada: “house_age” \n","# -Se o valor dacoluna “date” for maiorque 2014-01-01 => ‘new_house’\n","# -Se o valor da coluna “date” for menor que 2014-01-01 => ‘old_house’\n","data['date'] = pd.to_datetime (data['date'], format='%Y-%m-%d')  # transformando o tipo date pro formata datetime.stamp do pandas\n","data['house_age'] = data['date'].apply( lambda x: 'new_house' if x > pd.to_datetime ('2014-01-01', format='%Y-%m-%d') else 'old_house') \n","data[['date', 'house_age']].sort_values('date', ascending=True)\n","\n","#apply - APLICA a função , linha por linha da coluna escolhida.\n","#lambda funções que o usuário não precisa definir, ou seja, não vai precisar escrever a função e depois utilizá-la dentro do código.\n","\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yY9hM86EEf8a"},"source":["# 2. Crie uma nova coluna chamada: “dormitory_type” \n","# Se o valor da coluna “bedrooms” for igual à 1 => ‘studio’\n","# Se o valor da coluna “bedrooms” for igual a 2 => ‘apartament’\n","# Se o valor da coluna “bedrooms” for maior que 2 => ‘house’\n","\n","data['dormitory_type'] = data['bedrooms'].apply( lambda y: 'studio' if y == 1 else\n","                                                          'apartment' if y == 2 else \n","                                                          'house' if y > 2 else 'NA')\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"30cnnFIGEmWa"},"source":["# 3. Crie uma nova colunachamada:“condition_type”\n","# - Se o valor da coluna “condition” for menor ou igual à 2 => ‘bad’\n","# - Se o valor da coluna “condition” for igual à 3 ou 4 => ‘regular’\n","# - Se o valor da coluna “condition” for igual à 5 => ‘good’\n","data['condition_type'] = data['condition'].apply(lambda z: 'bad' if z <= 2 else\n","                                                           'regular' if (z == 3) | (z == 4) else\n","                                                           'good' if z == 5 else 'NA' )\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k-fhOFxlEvcF"},"source":["# 4. Modifique o TIPO da Coluna “condition” para STRING\n","data['condition'] = data['condition'].astype(int)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wnybz81UE0Su"},"source":["# 5. Delete as colunas: “sqft_living15” e “sqft_lot15”\n","data = data.drop(['sqft_living15', 'sqft_lot15'], axis=1)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0_zHdWdcE6sf"},"source":["# 6. Modifique o TIPO a Coluna “yr_build” par DATE\n","data['yr_built'] = pd.to_datetime(data['yr_built'], format='%Y')\n","# deu erro"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2RyLw87zE-qR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633917418927,"user_tz":180,"elapsed":199,"user":{"displayName":"Kevin Puga","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhtqCFnGWTRmMrvPggXTaWaMez5ZBOD_v2ORKJOog=s64","userId":"06164262735999046241"}},"outputId":"b702ea86-0abc-49ce-9894-3add72912cae"},"source":["# 7. Modifique o TIPO a Coluna “yr_renovated” para DATE\n","# POR TER VARIOS VALORES 0 , TEMOS QUE CONVERTER ESTES VALORES PARA FORMATO DATE \n","data['yr_renovated'] = data['yr_renovated'].apply(\n","                                     lambda q: pd.to_datetime('1900-01-01', format='%Y-%m-%d') if q == 0 else\n","                                     pd.to_datetime(q, format='%Y'))\n","data.dtypes\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["id                         int64\n","date              datetime64[ns]\n","price                    float64\n","bedrooms                   int64\n","bathrooms                float64\n","sqft_living                int64\n","sqft_lot                   int64\n","floors                   float64\n","waterfront                 int64\n","view                       int64\n","condition                  int64\n","grade                      int64\n","sqft_above                 int64\n","sqft_basement              int64\n","yr_built          datetime64[ns]\n","yr_renovated      datetime64[ns]\n","zipcode                    int64\n","lat                      float64\n","long                     float64\n","level                     object\n","house_age                 object\n","dormitory_type            object\n","condition_type            object\n","dtype: object"]},"metadata":{},"execution_count":131}]},{"cell_type":"code","metadata":{"id":"VznRKbzJFENb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633917432974,"user_tz":180,"elapsed":291,"user":{"displayName":"Kevin Puga","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhtqCFnGWTRmMrvPggXTaWaMez5ZBOD_v2ORKJOog=s64","userId":"06164262735999046241"}},"outputId":"5f9fc2dd-f00b-4b67-d48e-8e2267e249ef"},"source":["# 8. Qual a data mais antiga de construção de um imóvel?\n","data['yr_built'].min()\n","\n","#reposta 1900\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Timestamp('1900-01-01 00:00:00')"]},"metadata":{},"execution_count":132}]},{"cell_type":"code","metadata":{"id":"akmEsxgoFGlt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633917631494,"user_tz":180,"elapsed":202,"user":{"displayName":"Kevin Puga","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhtqCFnGWTRmMrvPggXTaWaMez5ZBOD_v2ORKJOog=s64","userId":"06164262735999046241"}},"outputId":"ad80e644-c5a4-47c9-877b-6c34335f750b"},"source":["# 9. Qual a data mais antiga de renovação de um imóvel?\n","#temos que excluir as datas 1900-01-01 pois foram aquelas que convertemos de 0 para datetime\n","data.loc[data['yr_renovated'] > pd.to_datetime('1900-01-01', format='%Y-%m-%d'), 'yr_renovated'].min()\n","\n","\n","#resposta 1934\n","#nessa você descobriu que pode usar um query e um sort values na mesma linha \n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Timestamp('1934-01-01 00:00:00')"]},"metadata":{},"execution_count":135}]},{"cell_type":"code","metadata":{"id":"RxIiHyKlFOwI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633917701098,"user_tz":180,"elapsed":213,"user":{"displayName":"Kevin Puga","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhtqCFnGWTRmMrvPggXTaWaMez5ZBOD_v2ORKJOog=s64","userId":"06164262735999046241"}},"outputId":"fa5b8257-956d-49fb-8bd2-85ae2f23a3fb"},"source":["# 10. Quantos imóveis tem 2 andares?\n","len(data.query('floors == 2'))\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["8241"]},"metadata":{},"execution_count":137}]},{"cell_type":"code","metadata":{"id":"6XpdnYyeFUDu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633916034447,"user_tz":180,"elapsed":223,"user":{"displayName":"Kevin Puga","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhtqCFnGWTRmMrvPggXTaWaMez5ZBOD_v2ORKJOog=s64","userId":"06164262735999046241"}},"outputId":"69c946f0-0506-4b95-b166-7916bf0fd240"},"source":["# 11. Quantos imóveis estão com a condição igual a “regular” \n","len(data.loc[data['condition_type'] == 'regular'])\n","\n","#resposta 19710"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["19710"]},"metadata":{},"execution_count":106}]},{"cell_type":"code","metadata":{"id":"jZA-6rmRFWkB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633916037076,"user_tz":180,"elapsed":200,"user":{"displayName":"Kevin Puga","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhtqCFnGWTRmMrvPggXTaWaMez5ZBOD_v2ORKJOog=s64","userId":"06164262735999046241"}},"outputId":"c00d8c03-26b9-4e8b-ee4a-8a8c2acce507"},"source":["# 12. Quantos imóveis estão com a condição igual a “bad” e possuem “vista para água” ?\n","len(data[['condition_type','waterfront']].query('condition_type == \"bad\" and waterfront == 1'))\n","\n","#resposta 2"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":107}]},{"cell_type":"code","metadata":{"id":"Qmz1JZ3hFbTd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633916039162,"user_tz":180,"elapsed":212,"user":{"displayName":"Kevin Puga","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhtqCFnGWTRmMrvPggXTaWaMez5ZBOD_v2ORKJOog=s64","userId":"06164262735999046241"}},"outputId":"3c1902cb-5e97-4efc-fd8d-8e6acfe7c98c"},"source":["# 13. Quantos imóveis estão com a condição igual a “good” e são “new_house”?\n","len(data.query('condition_type == \"good\" and house_age == \"new_house\"'))\n","\n","#resposta 1701"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1701"]},"metadata":{},"execution_count":108}]},{"cell_type":"code","metadata":{"id":"BBn8yRREFgpe","colab":{"base_uri":"https://localhost:8080/","height":419},"executionInfo":{"status":"ok","timestamp":1633916042310,"user_tz":180,"elapsed":211,"user":{"displayName":"Kevin Puga","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhtqCFnGWTRmMrvPggXTaWaMez5ZBOD_v2ORKJOog=s64","userId":"06164262735999046241"}},"outputId":"e7914fea-2cfa-48c3-d4c8-d7b70a36db3c"},"source":["## 14. Qual o valor do imóvel mais caro do tipo “studio” ?\n","data[['price', 'dormitory_type']].query('dormitory_type == \"studio\"').sort_values('price', ascending=False)\n","\n","#Respsta 1247000.0$\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>price</th>\n","      <th>dormitory_type</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>8445</th>\n","      <td>1247000.0</td>\n","      <td>studio</td>\n","    </tr>\n","    <tr>\n","      <th>9888</th>\n","      <td>713000.0</td>\n","      <td>studio</td>\n","    </tr>\n","    <tr>\n","      <th>4410</th>\n","      <td>680000.0</td>\n","      <td>studio</td>\n","    </tr>\n","    <tr>\n","      <th>8165</th>\n","      <td>655100.0</td>\n","      <td>studio</td>\n","    </tr>\n","    <tr>\n","      <th>19273</th>\n","      <td>655000.0</td>\n","      <td>studio</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>16530</th>\n","      <td>90000.0</td>\n","      <td>studio</td>\n","    </tr>\n","    <tr>\n","      <th>7992</th>\n","      <td>90000.0</td>\n","      <td>studio</td>\n","    </tr>\n","    <tr>\n","      <th>3108</th>\n","      <td>89950.0</td>\n","      <td>studio</td>\n","    </tr>\n","    <tr>\n","      <th>465</th>\n","      <td>80000.0</td>\n","      <td>studio</td>\n","    </tr>\n","    <tr>\n","      <th>1149</th>\n","      <td>75000.0</td>\n","      <td>studio</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>199 rows × 2 columns</p>\n","</div>"],"text/plain":["           price dormitory_type\n","8445   1247000.0         studio\n","9888    713000.0         studio\n","4410    680000.0         studio\n","8165    655100.0         studio\n","19273   655000.0         studio\n","...          ...            ...\n","16530    90000.0         studio\n","7992     90000.0         studio\n","3108     89950.0         studio\n","465      80000.0         studio\n","1149     75000.0         studio\n","\n","[199 rows x 2 columns]"]},"metadata":{},"execution_count":109}]},{"cell_type":"code","metadata":{"id":"rW4Y9WXiFjaq"},"source":["## 15. Quantos imóveis do tipo “apartment” foram reformados em 2015 ?\n","data.query('yr_renovated == 2015  and dormitory_type == \"apartment\"')\n","\n","#resposta nenhum\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fZdi4xtiFnY7"},"source":["# 16. Qual o maior número de quartos que um imóvel do tipo “house” possui ?\n","data[['bedrooms', 'dormitory_type']].query('dormitory_type == \"house\"').sort_values('bedrooms', ascending=False)\n","\n","#resposta 33"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yCccnW4dFuu0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633916054873,"user_tz":180,"elapsed":196,"user":{"displayName":"Kevin Puga","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhtqCFnGWTRmMrvPggXTaWaMez5ZBOD_v2ORKJOog=s64","userId":"06164262735999046241"}},"outputId":"30097348-39f0-4488-d070-17cb1869722e"},"source":["# 17. Quantos imóveis “new_house” foram reformados no ano de 2014?\n","len(data.query('yr_renovated == 2014 and house_age == \"new_house\"'))\n","\n","#resposta 91"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["91"]},"metadata":{},"execution_count":112}]},{"cell_type":"code","metadata":{"id":"vWvd9EseF5CZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1633915780360,"user_tz":180,"elapsed":284,"user":{"displayName":"Kevin Puga","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhtqCFnGWTRmMrvPggXTaWaMez5ZBOD_v2ORKJOog=s64","userId":"06164262735999046241"}},"outputId":"82b831e1-6ecc-4f63-e538-d4dded65f424"},"source":["#18. Selecione ascolunas: “id” 0, “date” 1,“price” 2, “floors” 7, “zipcode” 16 pelo método:\n","#   18.1. Direto pelo nome das colunas.\n","data[['id', 'date','price', 'floors', 'zipcode']].head()\n","#   18.2. Pelos Índices.\n","data.iloc[:,[0,1,2,7,16]]\n","#   18.3. Pelos Índices das linhas e o nome das colunas\n","data.loc[:, ['id', 'date','price', 'floors', 'zipcode']]\n","#   18.4. Índices Booleanos\n","cols = [True, True, True, False, False, False, False, \n","        True, False, False, False, False, False, False, \n","        False, False, True, False, False, False, False, False, False]\n","print(data.loc[0:10, cols])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["            id       date      price  floors  zipcode\n","0   7129300520 2014-10-13   221900.0     1.0    98178\n","1   6414100192 2014-12-09   538000.0     2.0    98125\n","2   5631500400 2015-02-25   180000.0     1.0    98028\n","3   2487200875 2014-12-09   604000.0     1.0    98136\n","4   1954400510 2015-02-18   510000.0     1.0    98074\n","5   7237550310 2014-05-12  1225000.0     1.0    98053\n","6   1321400060 2014-06-27   257500.0     2.0    98003\n","7   2008000270 2015-01-15   291850.0     1.0    98198\n","8   2414600126 2015-04-15   229500.0     1.0    98146\n","9   3793500160 2015-03-12   323000.0     2.0    98038\n","10  1736800520 2015-04-03   662500.0     1.0    98007\n"]}]},{"cell_type":"code","metadata":{"id":"kwjY43QHGHrj"},"source":["# 19. Salve um arquivo .csv com somenteas colunas do item 10 ao 17.\n","relatorio2 = data[['id', 'date','price', 'floors', 'zipcode']]\n","relatorio2.head()\n","relatorio2.to_csv('relatorio2.csv', index=False)"],"execution_count":null,"outputs":[]}]}